#+TITLE: emacs  
#+AUTHOR: Bill Wear  
#+OPTIONS: toc:nil num:nil  
#+EXPORT_FILE_NAME: ~/bill/var/www/billwear.github.io/emacs.html  
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="custom.css">  

Emacs is not just a text editor; it’s a dynamic ecosystem and a philosophy of *freedom*, *automation*, *adaptability*, and *community*. My =.emacs= configuration is a reflection of these values, tailored to streamline my workflow, manage my goals, and keep everything synchronized across devices. By looking at the way I handle git automation, use Org-mode files to manage my life, and integrate tools like Treemacs, Company, and Ivy, we can see how Emacs becomes an essential tool for maintaining both personal and professional efficiency.

** Freedom Through Customization

Freedom is at the heart of Emacs. Unlike rigid tools with fixed workflows, Emacs empowers users to shape their environment to meet their needs. My =.emacs= file is more than just a configuration; it’s a personal declaration of independence. I set my home directory to =~/bill=, a persistent workspace that travels with me across platforms.

#+BEGIN_SRC emacs-lisp
(setq hdir "~/bill")
(setq git-repo-url "git@gitlab.com:billwear/root.git")
(setq default-directory hdir)
#+END_SRC

This persistent setup ensures that wherever I work — be it on my desktop, laptop, or Termux on Android — I’m always in familiar territory. The freedom to create a consistent environment across devices means I can focus on my work, not on configuring new setups.

My =~/bill= directory mirrors the Unix home directory structure I’ve been using for over 50 years. This design keeps things intuitive and organized:

- **=~/bill/etc/org/=**: For Org-mode files and configurations.  
- **=~/bill/usr/projects/=**: For development work and personal projects.  
- **=~/bill/var/www/=**: For my website files.  

This structure reinforces consistency and simplicity, principles that have guided me throughout my life.

** Automation: The System Works for Me

Automation is a core value that keeps me efficient and focused. One of the most powerful automations in my workflow is git synchronization. Keeping my configuration and notes synchronized across devices is critical, but I take a careful approach: I always check for changes before committing. This practice ensures that I have full control and awareness of what’s being synchronized.

*** Why Check for Changes?

Checking for changes before committing prevents unwanted or erroneous updates from propagating through my workflow. It helps me avoid conflicts, identify unintended modifications, and maintain a clean and organized repository. Automation is powerful, but mindful automation — where I’m aware of the system’s actions — is even more effective.

*** Auto-Sync Function

Here's the function that handles the process of checking, committing, pulling, and pushing changes:

#+BEGIN_SRC emacs-lisp
(defun my/git-auto-sync ()
  "Auto-sync function to pull, merge, and push changes with proper checks."
  (interactive)
  (save-some-buffers t)
  (let ((default-directory hdir))
    ;; Check for uncommitted changes
    (if (not (string-empty-p (shell-command-to-string "git status --porcelain")))
        (progn
          (message "Uncommitted changes detected. Committing changes...")
          (shell-command "git add .")
          (shell-command "git commit -m 'Auto-commit before sync'")
          (message "Changes committed successfully."))
      (message "No changes to commit."))

    ;; Pull latest changes (merge instead of rebase)
    (if (zerop (shell-command "git pull --no-rebase origin main"))
        (progn
          (message "Pulled latest changes successfully.")
          (shell-command "git push origin main")
          (message "Pushed changes successfully."))
      (message "Error during git pull. Resolve conflicts manually."))))
#+END_SRC

This ensures that my work is always up-to-date and consistent across devices, reducing the mental load of remembering to sync manually.

** Managing Life with Org-mode

Emacs becomes even more powerful with Org-mode, a system for organizing tasks, notes, and schedules. Inspired by Tom Limoncelli’s [[https://www.amazon.com/Time-Management-System-Administrators-Working/dp/0596007833][Time Management for System Administrators]], I use three primary Org-mode files: =life-goals.org=, =todo.org=, and =calendar.org=. These files help me plan, prioritize, and execute tasks effectively.

*** The Three Key Files

1. **=life-goals.org=**: This file contains my long-term objectives and overarching ambitions. It’s where I break down my goals into manageable steps and track my progress. Having a clear view of my life goals keeps me anchored and ensures that my daily work aligns with what truly matters to me.

2. **=todo.org=**: This file is my central hub for day-to-day tasks. It’s a running list of everything I need to do, categorized by priority and context. Whether it’s a simple errand or a complex work project, =todo.org= helps me stay on top of it all. Tasks are regularly reviewed and updated to keep me productive and focused.

3. **=calendar.org=**: This file helps me manage time-sensitive tasks, appointments, and deadlines. It acts as a bridge between my goals and my schedule, ensuring that important commitments are honored. By keeping track of deadlines and events, I can allocate my time wisely.

*** Configuration File for Org-Agenda

Instead of hardcoding these files directly in my =.emacs=, I use a separate configuration file to load them. This keeps my main configuration clean and modular. Here’s how I set up the Org-agenda files:

In a separate =org-config.el= file:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/bill/etc/org/life-goals.org"
                         "~/bill/etc/org/todo.org"
                         "~/bill/etc/org/calendar.org"))
#+END_SRC

In my =.emacs= file, I load this configuration:

#+BEGIN_SRC emacs-lisp
(load "~/bill/etc/org-config.el")
#+END_SRC

This modular approach keeps my configuration organized and makes it easy to update or expand my Org-agenda setup without cluttering the main =.emacs= file.

** Efficiency Through Treemacs, Company, and Ivy

Emacs thrives on tools that enhance efficiency by reducing cognitive load. Three key tools in my setup are Treemacs, Company, and Ivy.

*** Treemacs

Treemacs is a powerful file and project explorer that keeps my workspace organized and accessible. With Treemacs, I can navigate my projects visually, reducing the need to remember deep directory paths.

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :config
  (setq treemacs-width 30))
#+END_SRC

*** Company Mode

Company mode provides intelligent, context-aware autocompletion. Whether I’m writing code, text, or configuration files, Company helps me type faster and more accurately by suggesting completions, sparing me the effort of remembering exact syntax.

#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (global-company-mode))
#+END_SRC

*** Ivy and Counsel

Ivy and Counsel streamline command and file completion, making it faster to find and open files, run commands, and search through buffers. With these tools, I reduce the mental burden of remembering long command names or file paths.

#+BEGIN_SRC emacs-lisp
(use-package ivy :config (ivy-mode 1))
(use-package counsel :config (counsel-mode))
#+END_SRC

These tools work together to create an environment where the mechanics of work fade into the background, letting me focus on what matters most.

** Conclusion: Emacs as a Way of Life

Emacs is more than just a tool — it’s a way of life. It represents freedom, automation, adaptability, and continuous improvement. Through thoughtful customization, automated synchronization, and effective planning with Org-mode, Emacs helps me manage both my work and personal life with clarity and efficiency.

By combining git automation, a Unix-inspired directory structure, and powerful tools like Treemacs, Company, and Ivy, Emacs becomes a partner in the pursuit of simplicity, efficiency, and growth. This system isn’t static; it evolves with me. My =.emacs= file is a living document that reflects my values and adapts to my needs.

In embracing Emacs, I embrace a philosophy of deliberate, thoughtful work — a journey of exploration, resilience, and authenticity that never truly ends.
